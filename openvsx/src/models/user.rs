/*
 * Open VSX Registry API
 *
 * This API provides metadata of VS Code extensions in the Open VSX Registry as well as means to publish extensions.
 *
 * The version of the OpenAPI document: 0.1
 *
 * Generated by: https://openapi-generator.tech
 */

/// User : User data

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct User {
    /// Indicates success of the operation (omitted if a more specific result type is returned)
    #[serde(rename = "success", skip_serializing_if = "Option::is_none")]
    pub success: Option<String>,
    /// Indicates a warning; when this is present, other properties can still be used
    #[serde(rename = "warning", skip_serializing_if = "Option::is_none")]
    pub warning: Option<String>,
    /// Indicates an error; when this is present, all other properties should be ignored
    #[serde(rename = "error", skip_serializing_if = "Option::is_none")]
    pub error: Option<String>,
    /// Login name
    #[serde(rename = "loginName")]
    pub login_name: String,
    /// Full name
    #[serde(rename = "fullName", skip_serializing_if = "Option::is_none")]
    pub full_name: Option<String>,
    /// URL to the user's avatar image
    #[serde(rename = "avatarUrl", skip_serializing_if = "Option::is_none")]
    pub avatar_url: Option<String>,
    /// URL to the user's profile page
    #[serde(rename = "homepage", skip_serializing_if = "Option::is_none")]
    pub homepage: Option<String>,
    /// Authentication provider (e.g. github)
    #[serde(rename = "provider", skip_serializing_if = "Option::is_none")]
    pub provider: Option<String>,
}

impl User {
    /// User data
    pub fn new(login_name: String) -> User {
        User {
            success: None,
            warning: None,
            error: None,
            login_name,
            full_name: None,
            avatar_url: None,
            homepage: None,
            provider: None,
        }
    }
}
