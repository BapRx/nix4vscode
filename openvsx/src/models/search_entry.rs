/*
 * Open VSX Registry API
 *
 * This API provides metadata of VS Code extensions in the Open VSX Registry as well as means to publish extensions.
 *
 * The version of the OpenAPI document: 0.1
 *
 * Generated by: https://openapi-generator.tech
 */

/// SearchEntry : Summary of metadata of an extension

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SearchEntry {
    /// URL to get the full metadata of the extension
    #[serde(rename = "url")]
    pub url: String,
    /// Map of file types (download, manifest, icon, readme, license, changelog) to their respective URLs
    #[serde(rename = "files")]
    pub files: ::std::collections::HashMap<String, String>,
    /// Name of the extension
    #[serde(rename = "name")]
    pub name: String,
    /// Namespace of the extension
    #[serde(rename = "namespace")]
    pub namespace: String,
    /// The latest published version
    #[serde(rename = "version")]
    pub version: String,
    /// Date and time when this version was published (ISO-8601)
    #[serde(rename = "timestamp")]
    pub timestamp: String,
    /// Essential metadata of all available versions. Deprecated: only returns the last 100 versions. Use allVersionsUrl instead.
    #[serde(rename = "allVersions", skip_serializing_if = "Option::is_none")]
    pub all_versions: Option<Vec<crate::models::VersionReference>>,
    /// URL to get essential metadata of all available versions.
    #[serde(rename = "allVersionsUrl", skip_serializing_if = "Option::is_none")]
    pub all_versions_url: Option<String>,
    /// Average rating
    #[serde(rename = "averageRating", skip_serializing_if = "Option::is_none")]
    pub average_rating: Option<f64>,
    /// Number of reviews
    #[serde(rename = "reviewCount", skip_serializing_if = "Option::is_none")]
    pub review_count: Option<i64>,
    /// Number of downloads of the extension package
    #[serde(rename = "downloadCount", skip_serializing_if = "Option::is_none")]
    pub download_count: Option<i32>,
    /// Name to be displayed in user interfaces
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
}

impl SearchEntry {
    /// Summary of metadata of an extension
    pub fn new(
        url: String,
        files: ::std::collections::HashMap<String, String>,
        name: String,
        namespace: String,
        version: String,
        timestamp: String,
    ) -> SearchEntry {
        SearchEntry {
            url,
            files,
            name,
            namespace,
            version,
            timestamp,
            all_versions: None,
            all_versions_url: None,
            average_rating: None,
            review_count: None,
            download_count: None,
            display_name: None,
            description: None,
        }
    }
}
