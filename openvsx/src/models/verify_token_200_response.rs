/*
 * Open VSX Registry API
 *
 * This API provides metadata of VS Code extensions in the Open VSX Registry as well as means to publish extensions.
 *
 * The version of the OpenAPI document: 0.1
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VerifyToken200Response {
    /// Indicates success of the operation (omitted if a more specific result type is returned)
    #[serde(rename = "success", skip_serializing_if = "Option::is_none")]
    pub success: Option<String>,
    /// Indicates a warning; when this is present, other properties can still be used
    #[serde(rename = "warning", skip_serializing_if = "Option::is_none")]
    pub warning: Option<String>,
    /// Indicates an error; when this is present, all other properties should be ignored
    #[serde(rename = "error", skip_serializing_if = "Option::is_none")]
    pub error: Option<String>,
    /// Name of the namespace
    #[serde(rename = "name")]
    pub name: String,
    /// List of matching entries, limited to the size specified in the search query
    #[serde(rename = "extensions")]
    pub extensions: Vec<crate::models::SearchEntry>,
    /// Indicates whether the namespace has an owner (not required for creating)
    #[serde(rename = "verified")]
    pub verified: bool,
    /// Access level of the namespace. Deprecated: namespaces are now always restricted
    #[serde(rename = "access", skip_serializing_if = "Option::is_none")]
    pub access: Option<Access>,
    /// List of memberships
    #[serde(rename = "namespaceMemberships")]
    pub namespace_memberships: Vec<crate::models::NamespaceMembershipJson>,
    /// Number of skipped entries according to the search query
    #[serde(rename = "offset")]
    pub offset: i32,
    /// Total number of entries that match the search query
    #[serde(rename = "totalSize")]
    pub total_size: i32,
    #[serde(rename = "reviews")]
    pub reviews: Vec<crate::models::Review>,
    /// Login name
    #[serde(rename = "loginName")]
    pub login_name: String,
    /// Full name
    #[serde(rename = "fullName", skip_serializing_if = "Option::is_none")]
    pub full_name: Option<String>,
    /// URL to the user's avatar image
    #[serde(rename = "avatarUrl", skip_serializing_if = "Option::is_none")]
    pub avatar_url: Option<String>,
    /// URL to the user's profile page
    #[serde(rename = "homepage", skip_serializing_if = "Option::is_none")]
    pub homepage: Option<String>,
    /// Authentication provider (e.g. github)
    #[serde(rename = "provider", skip_serializing_if = "Option::is_none")]
    pub provider: Option<String>,
}

impl VerifyToken200Response {
    pub fn new(
        name: String,
        extensions: Vec<crate::models::SearchEntry>,
        verified: bool,
        namespace_memberships: Vec<crate::models::NamespaceMembershipJson>,
        offset: i32,
        total_size: i32,
        reviews: Vec<crate::models::Review>,
        login_name: String,
    ) -> VerifyToken200Response {
        VerifyToken200Response {
            success: None,
            warning: None,
            error: None,
            name,
            extensions,
            verified,
            access: None,
            namespace_memberships,
            offset,
            total_size,
            reviews,
            login_name,
            full_name: None,
            avatar_url: None,
            homepage: None,
            provider: None,
        }
    }
}

/// Access level of the namespace. Deprecated: namespaces are now always restricted
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Access {
    #[serde(rename = "public")]
    Public,
    #[serde(rename = "restricted")]
    Restricted,
}

impl Default for Access {
    fn default() -> Access {
        Self::Public
    }
}
