/*
 * Open VSX Registry API
 *
 * This API provides metadata of VS Code extensions in the Open VSX Registry as well as means to publish extensions.
 *
 * The version of the OpenAPI document: 0.1
 *
 * Generated by: https://openapi-generator.tech
 */

/// NamespaceDetails : Details of a namespace

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct NamespaceDetails {
    /// Indicates success of the operation (omitted if a more specific result type is returned)
    #[serde(rename = "success", skip_serializing_if = "Option::is_none")]
    pub success: Option<String>,
    /// Indicates a warning; when this is present, other properties can still be used
    #[serde(rename = "warning", skip_serializing_if = "Option::is_none")]
    pub warning: Option<String>,
    /// Indicates an error; when this is present, all other properties should be ignored
    #[serde(rename = "error", skip_serializing_if = "Option::is_none")]
    pub error: Option<String>,
    /// Name of the namespace
    #[serde(rename = "name")]
    pub name: String,
    /// Display name of the namespace
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    /// Description of the namespace
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Logo URL of the namespace
    #[serde(rename = "logo", skip_serializing_if = "Option::is_none")]
    pub logo: Option<String>,
    /// Website URL of the namespace
    #[serde(rename = "website", skip_serializing_if = "Option::is_none")]
    pub website: Option<String>,
    /// Support URL of the namespace
    #[serde(rename = "supportLink", skip_serializing_if = "Option::is_none")]
    pub support_link: Option<String>,
    /// Map of social network names to their profile URLs
    #[serde(rename = "socialLinks", skip_serializing_if = "Option::is_none")]
    pub social_links: Option<::std::collections::HashMap<String, String>>,
    /// Map of extension names to their metadata URLs
    #[serde(rename = "extensions", skip_serializing_if = "Option::is_none")]
    pub extensions: Option<Vec<crate::models::SearchEntry>>,
    /// Indicates whether the namespace has an owner
    #[serde(rename = "verified")]
    pub verified: bool,
}

impl NamespaceDetails {
    /// Details of a namespace
    pub fn new(name: String, verified: bool) -> NamespaceDetails {
        NamespaceDetails {
            success: None,
            warning: None,
            error: None,
            name,
            display_name: None,
            description: None,
            logo: None,
            website: None,
            support_link: None,
            social_links: None,
            extensions: None,
            verified,
        }
    }
}
