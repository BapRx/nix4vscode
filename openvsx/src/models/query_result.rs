/*
 * Open VSX Registry API
 *
 * This API provides metadata of VS Code extensions in the Open VSX Registry as well as means to publish extensions.
 *
 * The version of the OpenAPI document: 0.1
 *
 * Generated by: https://openapi-generator.tech
 */

/// QueryResult : Metadata query result

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct QueryResult {
    /// Indicates success of the operation (omitted if a more specific result type is returned)
    #[serde(rename = "success", skip_serializing_if = "Option::is_none")]
    pub success: Option<String>,
    /// Indicates a warning; when this is present, other properties can still be used
    #[serde(rename = "warning", skip_serializing_if = "Option::is_none")]
    pub warning: Option<String>,
    /// Indicates an error; when this is present, all other properties should be ignored
    #[serde(rename = "error", skip_serializing_if = "Option::is_none")]
    pub error: Option<String>,
    /// Number of skipped entries according to the query
    #[serde(rename = "offset")]
    pub offset: i32,
    /// Total number of entries that match the query
    #[serde(rename = "totalSize")]
    pub total_size: i32,
    /// Extensions that match the given query (may be empty)
    #[serde(rename = "extensions", skip_serializing_if = "Option::is_none")]
    pub extensions: Option<Vec<crate::models::Extension>>,
}

impl QueryResult {
    /// Metadata query result
    pub fn new(offset: i32, total_size: i32) -> QueryResult {
        QueryResult {
            success: None,
            warning: None,
            error: None,
            offset,
            total_size,
            extensions: None,
        }
    }
}
