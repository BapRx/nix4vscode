/*
 * Open VSX Registry API
 *
 * This API provides metadata of VS Code extensions in the Open VSX Registry as well as means to publish extensions.
 *
 * The version of the OpenAPI document: 0.1
 *
 * Generated by: https://openapi-generator.tech
 */

/// Extension : Metadata of an extension

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Extension {
    /// Indicates success of the operation (omitted if a more specific result type is returned)
    #[serde(rename = "success", skip_serializing_if = "Option::is_none")]
    pub success: Option<String>,
    /// Indicates a warning; when this is present, other properties can still be used
    #[serde(rename = "warning", skip_serializing_if = "Option::is_none")]
    pub warning: Option<String>,
    /// Indicates an error; when this is present, all other properties should be ignored
    #[serde(rename = "error", skip_serializing_if = "Option::is_none")]
    pub error: Option<String>,
    /// URL to get metadata of the extension's namespace
    #[serde(rename = "namespaceUrl")]
    pub namespace_url: String,
    /// URL to get the list of reviews of this extension
    #[serde(rename = "reviewsUrl")]
    pub reviews_url: String,
    /// Map of file types (download, manifest, icon, readme, license, changelog) to their respective URLs
    #[serde(rename = "files", skip_serializing_if = "Option::is_none")]
    pub files: Option<::std::collections::HashMap<String, String>>,
    /// Name of the extension
    #[serde(rename = "name")]
    pub name: String,
    /// Namespace of the extension
    #[serde(rename = "namespace")]
    pub namespace: String,
    /// Name of the target platform
    #[serde(rename = "targetPlatform", skip_serializing_if = "Option::is_none")]
    pub target_platform: Option<String>,
    /// Selected version, or the latest version if none was specified
    #[serde(rename = "version")]
    pub version: String,
    /// Indicates whether this is a pre-release version
    #[serde(rename = "preRelease", skip_serializing_if = "Option::is_none")]
    pub pre_release: Option<bool>,
    #[serde(rename = "publishedBy")]
    pub published_by: Box<crate::models::User>,
    /// The value 'true' means the publishing user is a privileged user or the publishing user is a member of the extension's namespace and the namespace has at least one owner.
    #[serde(rename = "verified")]
    pub verified: bool,
    /// Deprecated: use 'verified' instead (this property is just the negation of 'verified')
    #[serde(rename = "unrelatedPublisher")]
    pub unrelated_publisher: bool,
    /// Access level of the extension's namespace. Deprecated: namespaces are now always restricted
    #[serde(rename = "namespaceAccess")]
    pub namespace_access: NamespaceAccess,
    /// Map of available versions to their metadata URLs. Deprecated: only returns the last 100 versions. Use allVersionsUrl instead.
    #[serde(rename = "allVersions", skip_serializing_if = "Option::is_none")]
    pub all_versions: Option<::std::collections::HashMap<String, String>>,
    /// URL to get a map of available versions to their metadata URLs.
    #[serde(rename = "allVersionsUrl", skip_serializing_if = "Option::is_none")]
    pub all_versions_url: Option<String>,
    /// Average rating
    #[serde(rename = "averageRating", skip_serializing_if = "Option::is_none")]
    pub average_rating: Option<f64>,
    /// Number of downloads of the extension package
    #[serde(rename = "downloadCount", skip_serializing_if = "Option::is_none")]
    pub download_count: Option<i32>,
    /// Number of reviews
    #[serde(rename = "reviewCount", skip_serializing_if = "Option::is_none")]
    pub review_count: Option<i64>,
    /// Available version aliases ('latest' or 'pre-release')
    #[serde(rename = "versionAlias", skip_serializing_if = "Option::is_none")]
    pub version_alias: Option<Vec<String>>,
    /// Date and time when this version was published (ISO-8601)
    #[serde(rename = "timestamp")]
    pub timestamp: String,
    /// Indicates whether this is a preview extension
    #[serde(rename = "preview", skip_serializing_if = "Option::is_none")]
    pub preview: Option<bool>,
    /// Name to be displayed in user interfaces
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    /// Namespace name to be displayed in user interfaces
    #[serde(
        rename = "namespaceDisplayName",
        skip_serializing_if = "Option::is_none"
    )]
    pub namespace_display_name: Option<String>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Map of engine names to the respective version constraints
    #[serde(rename = "engines", skip_serializing_if = "Option::is_none")]
    pub engines: Option<::std::collections::HashMap<String, String>>,
    #[serde(rename = "categories", skip_serializing_if = "Option::is_none")]
    pub categories: Option<Vec<String>>,
    /// A list that indicates where the extension should run in remote configurations. Values are \"ui\" (run locally), \"workspace\" (run on remote machine) and \"web\"
    #[serde(rename = "extensionKind", skip_serializing_if = "Option::is_none")]
    pub extension_kind: Option<Vec<String>>,
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    /// License identifier
    #[serde(rename = "license", skip_serializing_if = "Option::is_none")]
    pub license: Option<String>,
    /// URL of the extension's homepage
    #[serde(rename = "homepage", skip_serializing_if = "Option::is_none")]
    pub homepage: Option<String>,
    /// URL of the extension's source repository
    #[serde(rename = "repository", skip_serializing_if = "Option::is_none")]
    pub repository: Option<String>,
    /// URL to sponsor the extension
    #[serde(rename = "sponsorLink", skip_serializing_if = "Option::is_none")]
    pub sponsor_link: Option<String>,
    /// URL of the extension's bug tracker
    #[serde(rename = "bugs", skip_serializing_if = "Option::is_none")]
    pub bugs: Option<String>,
    /// Markdown rendering engine to use in user interfaces
    #[serde(rename = "markdown", skip_serializing_if = "Option::is_none")]
    pub markdown: Option<Markdown>,
    /// CSS color to use as background in user interfaces
    #[serde(rename = "galleryColor", skip_serializing_if = "Option::is_none")]
    pub gallery_color: Option<String>,
    /// Theme type for user interfaces
    #[serde(rename = "galleryTheme", skip_serializing_if = "Option::is_none")]
    pub gallery_theme: Option<GalleryTheme>,
    /// Languages the extension has been translated in
    #[serde(rename = "localizedLanguages", skip_serializing_if = "Option::is_none")]
    pub localized_languages: Option<Vec<String>>,
    /// URL of the extension's Q&A page
    #[serde(rename = "qna", skip_serializing_if = "Option::is_none")]
    pub qna: Option<String>,
    /// List of badges to display in user interfaces
    #[serde(rename = "badges", skip_serializing_if = "Option::is_none")]
    pub badges: Option<Vec<crate::models::Badge>>,
    /// List of dependencies to other extensions
    #[serde(rename = "dependencies", skip_serializing_if = "Option::is_none")]
    pub dependencies: Option<Vec<crate::models::ExtensionReference>>,
    /// List of extensions bundled with this extension
    #[serde(rename = "bundledExtensions", skip_serializing_if = "Option::is_none")]
    pub bundled_extensions: Option<Vec<crate::models::ExtensionReference>>,
    /// Map of download links by target platform
    #[serde(rename = "downloads", skip_serializing_if = "Option::is_none")]
    pub downloads: Option<::std::collections::HashMap<String, String>>,
    /// Map of target platforms by extension version
    #[serde(
        rename = "allTargetPlatformVersions",
        skip_serializing_if = "Option::is_none"
    )]
    pub all_target_platform_versions: Option<::std::collections::HashMap<String, Vec<String>>>,
    /// version metadata URL
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

impl Extension {
    /// Metadata of an extension
    pub fn new(
        namespace_url: String,
        reviews_url: String,
        name: String,
        namespace: String,
        version: String,
        published_by: crate::models::User,
        verified: bool,
        unrelated_publisher: bool,
        namespace_access: NamespaceAccess,
        timestamp: String,
    ) -> Extension {
        Extension {
            success: None,
            warning: None,
            error: None,
            namespace_url,
            reviews_url,
            files: None,
            name,
            namespace,
            target_platform: None,
            version,
            pre_release: None,
            published_by: Box::new(published_by),
            verified,
            unrelated_publisher,
            namespace_access,
            all_versions: None,
            all_versions_url: None,
            average_rating: None,
            download_count: None,
            review_count: None,
            version_alias: None,
            timestamp,
            preview: None,
            display_name: None,
            namespace_display_name: None,
            description: None,
            engines: None,
            categories: None,
            extension_kind: None,
            tags: None,
            license: None,
            homepage: None,
            repository: None,
            sponsor_link: None,
            bugs: None,
            markdown: None,
            gallery_color: None,
            gallery_theme: None,
            localized_languages: None,
            qna: None,
            badges: None,
            dependencies: None,
            bundled_extensions: None,
            downloads: None,
            all_target_platform_versions: None,
            url: None,
        }
    }
}

/// Access level of the extension's namespace. Deprecated: namespaces are now always restricted
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum NamespaceAccess {
    #[serde(rename = "public")]
    Public,
    #[serde(rename = "restricted")]
    Restricted,
}

impl Default for NamespaceAccess {
    fn default() -> NamespaceAccess {
        Self::Public
    }
}
/// Markdown rendering engine to use in user interfaces
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Markdown {
    #[serde(rename = "standard")]
    Standard,
    #[serde(rename = "github")]
    Github,
}

impl Default for Markdown {
    fn default() -> Markdown {
        Self::Standard
    }
}
/// Theme type for user interfaces
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum GalleryTheme {
    #[serde(rename = "light")]
    Light,
    #[serde(rename = "dark")]
    Dark,
}

impl Default for GalleryTheme {
    fn default() -> GalleryTheme {
        Self::Light
    }
}
